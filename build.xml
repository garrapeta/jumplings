<!--
	This is the ant file to build the jumplings builds apps in ant.
	This file imports the standart android build.xml provided by Google in the Antroid SDK tools package.
	This was created and tested using Android SDK Tools 22.0.1. I hope Google keeps the android.xml backwards compatible.
-->
<project name="jumplings" default="jumplings-all">

	<!-- The local.properties file is created and updated by the 'android'
	     tool.
	     It contains the path to the SDK. It should *NOT* be checked into
	     Version Control Systems. -->
	<property file="local.properties" />

	<!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
	<property file="ant.properties" />

	<!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
	<loadproperties srcFile="project.properties" />


	<!--
         Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
	<!-- version-tag: custom -->
	<import file="${sdk.dir}/tools/ant/build.xml" />


	<!--
    	********************************************************************************************************
    	**************************          JUMPLINGS ADDITIONS START HERE            **************************
    	********************************************************************************************************
    -->

	<!-- directory where the final apks will be copied -->
	<property name="release.dir" location="release" />


	<!--
    	****************************************    TOP LEVEL TASKS     ****************************************
    -->

	<!-- Builds the debug build -->
	<target name="jumplings-debug" description="Builds the debug build" depends="-jumplings-pre-build">
		<antcall target="debug" />
	</target>

	<!-- Builds the release build -->
	<target name="jumplings-release" description="release" depends="-jumplings-pre-build">
		<antcall target="release" />
	</target>
	
	<!-- Builds the debug and release builds -->
	<target name="jumplings-all" description="Builds the debug and release builds">
		<antcall target="jumplings-debug" />
		<antcall target="jumplings-release" />
	</target>
			
	<!--
    	****************************************    "PRIVATE" TASKS     ****************************************
    -->

    <target name="-jumplings-pre-build">
		<!-- cleans build directory -->
		<delete dir="${build.folder.dir}" />
        <!-- copy the AndroidManifest -->
        <copy todir="${build.folder.dir}" file="AndroidManifest.xml" failonerror="true" />
    </target>
	
	<!--
    	This target exists in the original android build file. The original one is empty, and it is called just before startting to 
    	compile, after the release or debug targets have been called.
    	It is some kind of "template method" we can "override" to do stuff before the code is compiled. 
    -->
	<target name="-pre-build">
		<echo> Performing pre-build operations </echo>

		<!-- copy files to build directory -->
        <copy todir="${build.folder.dir}" failonerror="true">
            <fileset dir="." />
        </copy>
        	
		<!-- read the AndroidManifest -->
		<xmlproperty file="${manifest.file}" collapseAttributes="true" />
		<!-- check versionName is specified -->
		<fail message="android:versionName not found in AndroidManifest" unless="manifest.android:versionName" />

		<!-- CONFIG PROPERTIES -->

		<replace file="${resource.absolute.dir}/values/config.xml" token="@bool/config_value_default_ads" value="true"/>
		<replace file="${resource.absolute.dir}/values/config.xml" token="@bool/config_value_default_paint_bitmaps" value="true"/>
		<replace file="${resource.absolute.dir}/values/config.xml" token="@bool/config_value_default_wireframe_mode" value="false"/>
		<replace file="${resource.absolute.dir}/values/config.xml" token="@bool/config_value_default_thread_bars" value="false"/>
		<replace file="${resource.absolute.dir}/values/config.xml" token="@bool/config_value_default_autoplay" value="false"/>
		<replace file="${resource.absolute.dir}/values/config.xml" token="@bool/config_value_default_flurry_enabled" value="true"/>
		<replace file="${resource.absolute.dir}/values/config.xml" token="@string/config_score_server_url_development" value="@string/config_score_server_url_production"/>
		<replace file="${resource.absolute.dir}/values/config.xml" token="backend_auth_token_unset" value="${backend_auth_secret}"/>
		
		
		<!--if>
			<condition>
				<equals arg1="${build.target}" arg2="debug" />
			</condition>
			<then>
			</then>
		</if>
		<if>
			<condition>
				<equals arg1="${build.target}" arg2="release" />
			</condition>
			<then>
			</then>
		</if-->
	</target>

	<!--
    	This target exists in the original android build file. The original one is empty, and it is called just before finishing the 
    	build.
    	It is some kind of "template method" we can "override" when the build finishes. 
    -->
	<target name="-post-build">
		<!-- if in debug, sign the apk (this is automatically called in release) -->
		<if>
			<condition>
				<equals arg1="${build.target}" arg2="debug" />
			</condition>
			<then>
				<ant antfile="build.xml" target="-release-sign" />
			</then>
		</if>

		<!-- Creates the prefix of the filenames -->
		<property name="filenames.prefix" value="${release.dir}/${ant.project.name}_${manifest.android:versionName}_${build.target}" />

		<!-- copies the apk -->
		<copy file="${out.final.file}" tofile="${filenames.prefix}.apk" failonerror="true" overwrite="true" />
		<!-- copies the proguard mapping file, if obfuscating -->
		<if condition="${proguard.enabled}">
			<then>
				<copy file="${obfuscate.absolute.dir}/mapping.txt" tofile="${filenames.prefix}_mapping.txt" failonerror="true" overwrite="true" />
			</then>
		</if>
	</target>


</project>